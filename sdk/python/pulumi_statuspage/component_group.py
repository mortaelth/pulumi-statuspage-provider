# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ComponentGroupArgs', 'ComponentGroup']

@pulumi.input_type
class ComponentGroupArgs:
    def __init__(__self__, *,
                 components: pulumi.Input[Sequence[pulumi.Input[str]]],
                 page_id: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ComponentGroup resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] components: List of component IDs
        :param pulumi.Input[str] page_id: the id of the page this component belongs to
        :param pulumi.Input[str] description: description of the component group
        :param pulumi.Input[str] name: name of the component group
        """
        pulumi.set(__self__, "components", components)
        pulumi.set(__self__, "page_id", page_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def components(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of component IDs
        """
        return pulumi.get(self, "components")

    @components.setter
    def components(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "components", value)

    @property
    @pulumi.getter(name="pageId")
    def page_id(self) -> pulumi.Input[str]:
        """
        the id of the page this component belongs to
        """
        return pulumi.get(self, "page_id")

    @page_id.setter
    def page_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "page_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description of the component group
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the component group
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _ComponentGroupState:
    def __init__(__self__, *,
                 components: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 page_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ComponentGroup resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] components: List of component IDs
        :param pulumi.Input[str] description: description of the component group
        :param pulumi.Input[str] name: name of the component group
        :param pulumi.Input[str] page_id: the id of the page this component belongs to
        """
        if components is not None:
            pulumi.set(__self__, "components", components)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if page_id is not None:
            pulumi.set(__self__, "page_id", page_id)

    @property
    @pulumi.getter
    def components(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of component IDs
        """
        return pulumi.get(self, "components")

    @components.setter
    def components(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "components", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description of the component group
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the component group
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="pageId")
    def page_id(self) -> Optional[pulumi.Input[str]]:
        """
        the id of the page this component belongs to
        """
        return pulumi.get(self, "page_id")

    @page_id.setter
    def page_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "page_id", value)


class ComponentGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 components: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 page_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_statuspage as statuspage

        my_group = statuspage.ComponentGroup("myGroup",
            components=[statuspage_component["my_component"]["id"]],
            description="Created by terraform",
            page_id="pageid")
        ```

        ## Import

        `statuspage_component_group` can be imported using the ID of the component group, e.g.

        ```sh
         $ pulumi import statuspage:index/componentGroup:ComponentGroup my_group my-page-id/my-component-group-id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] components: List of component IDs
        :param pulumi.Input[str] description: description of the component group
        :param pulumi.Input[str] name: name of the component group
        :param pulumi.Input[str] page_id: the id of the page this component belongs to
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ComponentGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_statuspage as statuspage

        my_group = statuspage.ComponentGroup("myGroup",
            components=[statuspage_component["my_component"]["id"]],
            description="Created by terraform",
            page_id="pageid")
        ```

        ## Import

        `statuspage_component_group` can be imported using the ID of the component group, e.g.

        ```sh
         $ pulumi import statuspage:index/componentGroup:ComponentGroup my_group my-page-id/my-component-group-id
        ```

        :param str resource_name: The name of the resource.
        :param ComponentGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ComponentGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 components: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 page_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ComponentGroupArgs.__new__(ComponentGroupArgs)

            if components is None and not opts.urn:
                raise TypeError("Missing required property 'components'")
            __props__.__dict__["components"] = components
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            if page_id is None and not opts.urn:
                raise TypeError("Missing required property 'page_id'")
            __props__.__dict__["page_id"] = page_id
        super(ComponentGroup, __self__).__init__(
            'statuspage:index/componentGroup:ComponentGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            components: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            page_id: Optional[pulumi.Input[str]] = None) -> 'ComponentGroup':
        """
        Get an existing ComponentGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] components: List of component IDs
        :param pulumi.Input[str] description: description of the component group
        :param pulumi.Input[str] name: name of the component group
        :param pulumi.Input[str] page_id: the id of the page this component belongs to
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ComponentGroupState.__new__(_ComponentGroupState)

        __props__.__dict__["components"] = components
        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["page_id"] = page_id
        return ComponentGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def components(self) -> pulumi.Output[Sequence[str]]:
        """
        List of component IDs
        """
        return pulumi.get(self, "components")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        description of the component group
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        name of the component group
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pageId")
    def page_id(self) -> pulumi.Output[str]:
        """
        the id of the page this component belongs to
        """
        return pulumi.get(self, "page_id")

