# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ComponentArgs', 'Component']

@pulumi.input_type
class ComponentArgs:
    def __init__(__self__, *,
                 page_id: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 only_show_if_degraded: Optional[pulumi.Input[bool]] = None,
                 showcase: Optional[pulumi.Input[bool]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Component resource.
        :param pulumi.Input[str] page_id: the id of the page this component belongs to
        :param pulumi.Input[str] description: Description of the component
        :param pulumi.Input[str] name: Name of the component
        :param pulumi.Input[bool] only_show_if_degraded: Should this component be shown component only if in degraded state
        :param pulumi.Input[bool] showcase: Should this component be showcased
               
               The following attributes are exported:
        :param pulumi.Input[str] status: status of the component - must be one of `operational`, `under_maintenance`, `degraded_performance`, `partial_outage`, `major_outage` or ` `
        """
        pulumi.set(__self__, "page_id", page_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if only_show_if_degraded is not None:
            pulumi.set(__self__, "only_show_if_degraded", only_show_if_degraded)
        if showcase is not None:
            pulumi.set(__self__, "showcase", showcase)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="pageId")
    def page_id(self) -> pulumi.Input[str]:
        """
        the id of the page this component belongs to
        """
        return pulumi.get(self, "page_id")

    @page_id.setter
    def page_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "page_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the component
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the component
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="onlyShowIfDegraded")
    def only_show_if_degraded(self) -> Optional[pulumi.Input[bool]]:
        """
        Should this component be shown component only if in degraded state
        """
        return pulumi.get(self, "only_show_if_degraded")

    @only_show_if_degraded.setter
    def only_show_if_degraded(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "only_show_if_degraded", value)

    @property
    @pulumi.getter
    def showcase(self) -> Optional[pulumi.Input[bool]]:
        """
        Should this component be showcased

        The following attributes are exported:
        """
        return pulumi.get(self, "showcase")

    @showcase.setter
    def showcase(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "showcase", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        status of the component - must be one of `operational`, `under_maintenance`, `degraded_performance`, `partial_outage`, `major_outage` or ` `
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class _ComponentState:
    def __init__(__self__, *,
                 automation_email: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 only_show_if_degraded: Optional[pulumi.Input[bool]] = None,
                 page_id: Optional[pulumi.Input[str]] = None,
                 showcase: Optional[pulumi.Input[bool]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Component resources.
        :param pulumi.Input[str] automation_email: Email address to send automation events to
        :param pulumi.Input[str] description: Description of the component
        :param pulumi.Input[str] name: Name of the component
        :param pulumi.Input[bool] only_show_if_degraded: Should this component be shown component only if in degraded state
        :param pulumi.Input[str] page_id: the id of the page this component belongs to
        :param pulumi.Input[bool] showcase: Should this component be showcased
               
               The following attributes are exported:
        :param pulumi.Input[str] status: status of the component - must be one of `operational`, `under_maintenance`, `degraded_performance`, `partial_outage`, `major_outage` or ` `
        """
        if automation_email is not None:
            pulumi.set(__self__, "automation_email", automation_email)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if only_show_if_degraded is not None:
            pulumi.set(__self__, "only_show_if_degraded", only_show_if_degraded)
        if page_id is not None:
            pulumi.set(__self__, "page_id", page_id)
        if showcase is not None:
            pulumi.set(__self__, "showcase", showcase)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="automationEmail")
    def automation_email(self) -> Optional[pulumi.Input[str]]:
        """
        Email address to send automation events to
        """
        return pulumi.get(self, "automation_email")

    @automation_email.setter
    def automation_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "automation_email", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the component
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the component
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="onlyShowIfDegraded")
    def only_show_if_degraded(self) -> Optional[pulumi.Input[bool]]:
        """
        Should this component be shown component only if in degraded state
        """
        return pulumi.get(self, "only_show_if_degraded")

    @only_show_if_degraded.setter
    def only_show_if_degraded(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "only_show_if_degraded", value)

    @property
    @pulumi.getter(name="pageId")
    def page_id(self) -> Optional[pulumi.Input[str]]:
        """
        the id of the page this component belongs to
        """
        return pulumi.get(self, "page_id")

    @page_id.setter
    def page_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "page_id", value)

    @property
    @pulumi.getter
    def showcase(self) -> Optional[pulumi.Input[bool]]:
        """
        Should this component be showcased

        The following attributes are exported:
        """
        return pulumi.get(self, "showcase")

    @showcase.setter
    def showcase(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "showcase", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        status of the component - must be one of `operational`, `under_maintenance`, `degraded_performance`, `partial_outage`, `major_outage` or ` `
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


class Component(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 only_show_if_degraded: Optional[pulumi.Input[bool]] = None,
                 page_id: Optional[pulumi.Input[str]] = None,
                 showcase: Optional[pulumi.Input[bool]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Import

        `statuspage_component` can be imported using the ID of the component, e.g.

        ```sh
        $ pulumi import statuspage:index/component:Component my_component my-page-id/my-component-id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description of the component
        :param pulumi.Input[str] name: Name of the component
        :param pulumi.Input[bool] only_show_if_degraded: Should this component be shown component only if in degraded state
        :param pulumi.Input[str] page_id: the id of the page this component belongs to
        :param pulumi.Input[bool] showcase: Should this component be showcased
               
               The following attributes are exported:
        :param pulumi.Input[str] status: status of the component - must be one of `operational`, `under_maintenance`, `degraded_performance`, `partial_outage`, `major_outage` or ` `
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ComponentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Import

        `statuspage_component` can be imported using the ID of the component, e.g.

        ```sh
        $ pulumi import statuspage:index/component:Component my_component my-page-id/my-component-id
        ```

        :param str resource_name: The name of the resource.
        :param ComponentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ComponentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 only_show_if_degraded: Optional[pulumi.Input[bool]] = None,
                 page_id: Optional[pulumi.Input[str]] = None,
                 showcase: Optional[pulumi.Input[bool]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ComponentArgs.__new__(ComponentArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["only_show_if_degraded"] = only_show_if_degraded
            if page_id is None and not opts.urn:
                raise TypeError("Missing required property 'page_id'")
            __props__.__dict__["page_id"] = page_id
            __props__.__dict__["showcase"] = showcase
            __props__.__dict__["status"] = status
            __props__.__dict__["automation_email"] = None
        super(Component, __self__).__init__(
            'statuspage:index/component:Component',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            automation_email: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            only_show_if_degraded: Optional[pulumi.Input[bool]] = None,
            page_id: Optional[pulumi.Input[str]] = None,
            showcase: Optional[pulumi.Input[bool]] = None,
            status: Optional[pulumi.Input[str]] = None) -> 'Component':
        """
        Get an existing Component resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] automation_email: Email address to send automation events to
        :param pulumi.Input[str] description: Description of the component
        :param pulumi.Input[str] name: Name of the component
        :param pulumi.Input[bool] only_show_if_degraded: Should this component be shown component only if in degraded state
        :param pulumi.Input[str] page_id: the id of the page this component belongs to
        :param pulumi.Input[bool] showcase: Should this component be showcased
               
               The following attributes are exported:
        :param pulumi.Input[str] status: status of the component - must be one of `operational`, `under_maintenance`, `degraded_performance`, `partial_outage`, `major_outage` or ` `
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ComponentState.__new__(_ComponentState)

        __props__.__dict__["automation_email"] = automation_email
        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["only_show_if_degraded"] = only_show_if_degraded
        __props__.__dict__["page_id"] = page_id
        __props__.__dict__["showcase"] = showcase
        __props__.__dict__["status"] = status
        return Component(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="automationEmail")
    def automation_email(self) -> pulumi.Output[str]:
        """
        Email address to send automation events to
        """
        return pulumi.get(self, "automation_email")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of the component
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the component
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="onlyShowIfDegraded")
    def only_show_if_degraded(self) -> pulumi.Output[Optional[bool]]:
        """
        Should this component be shown component only if in degraded state
        """
        return pulumi.get(self, "only_show_if_degraded")

    @property
    @pulumi.getter(name="pageId")
    def page_id(self) -> pulumi.Output[str]:
        """
        the id of the page this component belongs to
        """
        return pulumi.get(self, "page_id")

    @property
    @pulumi.getter
    def showcase(self) -> pulumi.Output[Optional[bool]]:
        """
        Should this component be showcased

        The following attributes are exported:
        """
        return pulumi.get(self, "showcase")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[Optional[str]]:
        """
        status of the component - must be one of `operational`, `under_maintenance`, `degraded_performance`, `partial_outage`, `major_outage` or ` `
        """
        return pulumi.get(self, "status")

