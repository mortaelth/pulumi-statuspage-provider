// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package statuspage

import (
	"context"
	"reflect"

	"errors"
	"github.com/mortaelth/pulumi-statuspage-provider/sdk/go/statuspage/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/mortaelth/pulumi-statuspage-provider/sdk/go/statuspage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := statuspage.NewMetricsProvider(ctx, "statuspagePingdom", &statuspage.MetricsProviderArgs{
//				ApiToken: pulumi.String("a-pingdom-api-token"),
//				PageId:   pulumi.String("pageid"),
//				Type:     pulumi.String("Pingdom"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// `statuspage_metrics_provider` can be imported using the ID of the metrics provider, e.g.
//
// ```sh
// $ pulumi import statuspage:index/metricsProvider:MetricsProvider statuspage_pingdom my-page-id/my-metrics-provider-id
// ```
type MetricsProvider struct {
	pulumi.CustomResourceState

	// Required by the Datadog and NewRelic type metrics providers.
	ApiKey pulumi.StringPtrOutput `pulumi:"apiKey"`
	// Required by the Librato and Pingdom-type metrics provider.
	ApiToken pulumi.StringPtrOutput `pulumi:"apiToken"`
	// Required by the Pingdom and Datadog type metrics providers.
	ApplicationKey pulumi.StringPtrOutput `pulumi:"applicationKey"`
	// Required by the Librato and Pingdom type metrics providers.
	Email pulumi.StringPtrOutput `pulumi:"email"`
	// Required by the NewRelic-type metrics provider
	MetricBaseUri pulumi.StringPtrOutput `pulumi:"metricBaseUri"`
	// the id of the page this component belongs to
	PageId pulumi.StringOutput `pulumi:"pageId"`
	// Required by the Pingdom-type metrics provider.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// One of `Pingdom`, `NewRelic`, `Librato`, `Datadog`, or `Self`
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewMetricsProvider registers a new resource with the given unique name, arguments, and options.
func NewMetricsProvider(ctx *pulumi.Context,
	name string, args *MetricsProviderArgs, opts ...pulumi.ResourceOption) (*MetricsProvider, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PageId == nil {
		return nil, errors.New("invalid value for required argument 'PageId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.ApiKey != nil {
		args.ApiKey = pulumi.ToSecret(args.ApiKey).(pulumi.StringPtrInput)
	}
	if args.ApiToken != nil {
		args.ApiToken = pulumi.ToSecret(args.ApiToken).(pulumi.StringPtrInput)
	}
	if args.ApplicationKey != nil {
		args.ApplicationKey = pulumi.ToSecret(args.ApplicationKey).(pulumi.StringPtrInput)
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"apiKey",
		"apiToken",
		"applicationKey",
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MetricsProvider
	err := ctx.RegisterResource("statuspage:index/metricsProvider:MetricsProvider", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetricsProvider gets an existing MetricsProvider resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetricsProvider(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetricsProviderState, opts ...pulumi.ResourceOption) (*MetricsProvider, error) {
	var resource MetricsProvider
	err := ctx.ReadResource("statuspage:index/metricsProvider:MetricsProvider", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MetricsProvider resources.
type metricsProviderState struct {
	// Required by the Datadog and NewRelic type metrics providers.
	ApiKey *string `pulumi:"apiKey"`
	// Required by the Librato and Pingdom-type metrics provider.
	ApiToken *string `pulumi:"apiToken"`
	// Required by the Pingdom and Datadog type metrics providers.
	ApplicationKey *string `pulumi:"applicationKey"`
	// Required by the Librato and Pingdom type metrics providers.
	Email *string `pulumi:"email"`
	// Required by the NewRelic-type metrics provider
	MetricBaseUri *string `pulumi:"metricBaseUri"`
	// the id of the page this component belongs to
	PageId *string `pulumi:"pageId"`
	// Required by the Pingdom-type metrics provider.
	Password *string `pulumi:"password"`
	// One of `Pingdom`, `NewRelic`, `Librato`, `Datadog`, or `Self`
	Type *string `pulumi:"type"`
}

type MetricsProviderState struct {
	// Required by the Datadog and NewRelic type metrics providers.
	ApiKey pulumi.StringPtrInput
	// Required by the Librato and Pingdom-type metrics provider.
	ApiToken pulumi.StringPtrInput
	// Required by the Pingdom and Datadog type metrics providers.
	ApplicationKey pulumi.StringPtrInput
	// Required by the Librato and Pingdom type metrics providers.
	Email pulumi.StringPtrInput
	// Required by the NewRelic-type metrics provider
	MetricBaseUri pulumi.StringPtrInput
	// the id of the page this component belongs to
	PageId pulumi.StringPtrInput
	// Required by the Pingdom-type metrics provider.
	Password pulumi.StringPtrInput
	// One of `Pingdom`, `NewRelic`, `Librato`, `Datadog`, or `Self`
	Type pulumi.StringPtrInput
}

func (MetricsProviderState) ElementType() reflect.Type {
	return reflect.TypeOf((*metricsProviderState)(nil)).Elem()
}

type metricsProviderArgs struct {
	// Required by the Datadog and NewRelic type metrics providers.
	ApiKey *string `pulumi:"apiKey"`
	// Required by the Librato and Pingdom-type metrics provider.
	ApiToken *string `pulumi:"apiToken"`
	// Required by the Pingdom and Datadog type metrics providers.
	ApplicationKey *string `pulumi:"applicationKey"`
	// Required by the Librato and Pingdom type metrics providers.
	Email *string `pulumi:"email"`
	// Required by the NewRelic-type metrics provider
	MetricBaseUri *string `pulumi:"metricBaseUri"`
	// the id of the page this component belongs to
	PageId string `pulumi:"pageId"`
	// Required by the Pingdom-type metrics provider.
	Password *string `pulumi:"password"`
	// One of `Pingdom`, `NewRelic`, `Librato`, `Datadog`, or `Self`
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a MetricsProvider resource.
type MetricsProviderArgs struct {
	// Required by the Datadog and NewRelic type metrics providers.
	ApiKey pulumi.StringPtrInput
	// Required by the Librato and Pingdom-type metrics provider.
	ApiToken pulumi.StringPtrInput
	// Required by the Pingdom and Datadog type metrics providers.
	ApplicationKey pulumi.StringPtrInput
	// Required by the Librato and Pingdom type metrics providers.
	Email pulumi.StringPtrInput
	// Required by the NewRelic-type metrics provider
	MetricBaseUri pulumi.StringPtrInput
	// the id of the page this component belongs to
	PageId pulumi.StringInput
	// Required by the Pingdom-type metrics provider.
	Password pulumi.StringPtrInput
	// One of `Pingdom`, `NewRelic`, `Librato`, `Datadog`, or `Self`
	Type pulumi.StringInput
}

func (MetricsProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metricsProviderArgs)(nil)).Elem()
}

type MetricsProviderInput interface {
	pulumi.Input

	ToMetricsProviderOutput() MetricsProviderOutput
	ToMetricsProviderOutputWithContext(ctx context.Context) MetricsProviderOutput
}

func (*MetricsProvider) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricsProvider)(nil)).Elem()
}

func (i *MetricsProvider) ToMetricsProviderOutput() MetricsProviderOutput {
	return i.ToMetricsProviderOutputWithContext(context.Background())
}

func (i *MetricsProvider) ToMetricsProviderOutputWithContext(ctx context.Context) MetricsProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricsProviderOutput)
}

// MetricsProviderArrayInput is an input type that accepts MetricsProviderArray and MetricsProviderArrayOutput values.
// You can construct a concrete instance of `MetricsProviderArrayInput` via:
//
//	MetricsProviderArray{ MetricsProviderArgs{...} }
type MetricsProviderArrayInput interface {
	pulumi.Input

	ToMetricsProviderArrayOutput() MetricsProviderArrayOutput
	ToMetricsProviderArrayOutputWithContext(context.Context) MetricsProviderArrayOutput
}

type MetricsProviderArray []MetricsProviderInput

func (MetricsProviderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetricsProvider)(nil)).Elem()
}

func (i MetricsProviderArray) ToMetricsProviderArrayOutput() MetricsProviderArrayOutput {
	return i.ToMetricsProviderArrayOutputWithContext(context.Background())
}

func (i MetricsProviderArray) ToMetricsProviderArrayOutputWithContext(ctx context.Context) MetricsProviderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricsProviderArrayOutput)
}

// MetricsProviderMapInput is an input type that accepts MetricsProviderMap and MetricsProviderMapOutput values.
// You can construct a concrete instance of `MetricsProviderMapInput` via:
//
//	MetricsProviderMap{ "key": MetricsProviderArgs{...} }
type MetricsProviderMapInput interface {
	pulumi.Input

	ToMetricsProviderMapOutput() MetricsProviderMapOutput
	ToMetricsProviderMapOutputWithContext(context.Context) MetricsProviderMapOutput
}

type MetricsProviderMap map[string]MetricsProviderInput

func (MetricsProviderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetricsProvider)(nil)).Elem()
}

func (i MetricsProviderMap) ToMetricsProviderMapOutput() MetricsProviderMapOutput {
	return i.ToMetricsProviderMapOutputWithContext(context.Background())
}

func (i MetricsProviderMap) ToMetricsProviderMapOutputWithContext(ctx context.Context) MetricsProviderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricsProviderMapOutput)
}

type MetricsProviderOutput struct{ *pulumi.OutputState }

func (MetricsProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricsProvider)(nil)).Elem()
}

func (o MetricsProviderOutput) ToMetricsProviderOutput() MetricsProviderOutput {
	return o
}

func (o MetricsProviderOutput) ToMetricsProviderOutputWithContext(ctx context.Context) MetricsProviderOutput {
	return o
}

// Required by the Datadog and NewRelic type metrics providers.
func (o MetricsProviderOutput) ApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricsProvider) pulumi.StringPtrOutput { return v.ApiKey }).(pulumi.StringPtrOutput)
}

// Required by the Librato and Pingdom-type metrics provider.
func (o MetricsProviderOutput) ApiToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricsProvider) pulumi.StringPtrOutput { return v.ApiToken }).(pulumi.StringPtrOutput)
}

// Required by the Pingdom and Datadog type metrics providers.
func (o MetricsProviderOutput) ApplicationKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricsProvider) pulumi.StringPtrOutput { return v.ApplicationKey }).(pulumi.StringPtrOutput)
}

// Required by the Librato and Pingdom type metrics providers.
func (o MetricsProviderOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricsProvider) pulumi.StringPtrOutput { return v.Email }).(pulumi.StringPtrOutput)
}

// Required by the NewRelic-type metrics provider
func (o MetricsProviderOutput) MetricBaseUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricsProvider) pulumi.StringPtrOutput { return v.MetricBaseUri }).(pulumi.StringPtrOutput)
}

// the id of the page this component belongs to
func (o MetricsProviderOutput) PageId() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricsProvider) pulumi.StringOutput { return v.PageId }).(pulumi.StringOutput)
}

// Required by the Pingdom-type metrics provider.
func (o MetricsProviderOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricsProvider) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// One of `Pingdom`, `NewRelic`, `Librato`, `Datadog`, or `Self`
func (o MetricsProviderOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricsProvider) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type MetricsProviderArrayOutput struct{ *pulumi.OutputState }

func (MetricsProviderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetricsProvider)(nil)).Elem()
}

func (o MetricsProviderArrayOutput) ToMetricsProviderArrayOutput() MetricsProviderArrayOutput {
	return o
}

func (o MetricsProviderArrayOutput) ToMetricsProviderArrayOutputWithContext(ctx context.Context) MetricsProviderArrayOutput {
	return o
}

func (o MetricsProviderArrayOutput) Index(i pulumi.IntInput) MetricsProviderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MetricsProvider {
		return vs[0].([]*MetricsProvider)[vs[1].(int)]
	}).(MetricsProviderOutput)
}

type MetricsProviderMapOutput struct{ *pulumi.OutputState }

func (MetricsProviderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetricsProvider)(nil)).Elem()
}

func (o MetricsProviderMapOutput) ToMetricsProviderMapOutput() MetricsProviderMapOutput {
	return o
}

func (o MetricsProviderMapOutput) ToMetricsProviderMapOutputWithContext(ctx context.Context) MetricsProviderMapOutput {
	return o
}

func (o MetricsProviderMapOutput) MapIndex(k pulumi.StringInput) MetricsProviderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MetricsProvider {
		return vs[0].(map[string]*MetricsProvider)[vs[1].(string)]
	}).(MetricsProviderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MetricsProviderInput)(nil)).Elem(), &MetricsProvider{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricsProviderArrayInput)(nil)).Elem(), MetricsProviderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricsProviderMapInput)(nil)).Elem(), MetricsProviderMap{})
	pulumi.RegisterOutputType(MetricsProviderOutput{})
	pulumi.RegisterOutputType(MetricsProviderArrayOutput{})
	pulumi.RegisterOutputType(MetricsProviderMapOutput{})
}
