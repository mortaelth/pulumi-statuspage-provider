// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package statuspage

import (
	"context"
	"reflect"

	"errors"
	"github.com/mortaelth/pulumi-statuspage-provider/sdk/go/statuspage/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Metric struct {
	pulumi.CustomResourceState

	// How many decimal places to render on the graph
	DecimalPlaces pulumi.IntPtrOutput `pulumi:"decimalPlaces"`
	// Should the metric be displayed
	Display pulumi.BoolPtrOutput `pulumi:"display"`
	// The identifier used to look up the metric data from the provider
	MetricIdentifier pulumi.StringPtrOutput `pulumi:"metricIdentifier"`
	// ID of the metric provider
	MetricsProviderId pulumi.StringOutput `pulumi:"metricsProviderId"`
	// Display name for the metric
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the page this metric belongs to
	PageId pulumi.StringOutput `pulumi:"pageId"`
	// Suffix to describe the units on the graph
	Suffix pulumi.StringPtrOutput `pulumi:"suffix"`
	// Tooltip for the metric
	TooltipDescription pulumi.StringPtrOutput `pulumi:"tooltipDescription"`
	// The transform to apply to metric before pulling into Statuspage. One of: 'average', 'count', 'max', 'min', 'sum',
	// 'response_time' or 'uptime'
	Transform pulumi.StringPtrOutput `pulumi:"transform"`
	// Should the values on the y axis be hidden on render
	YAxisHidden pulumi.BoolPtrOutput `pulumi:"yAxisHidden"`
	// The upper bound of the y axis
	YAxisMax pulumi.Float64PtrOutput `pulumi:"yAxisMax"`
	// The lower bound of the y axis
	YAxisMin pulumi.Float64PtrOutput `pulumi:"yAxisMin"`
}

// NewMetric registers a new resource with the given unique name, arguments, and options.
func NewMetric(ctx *pulumi.Context,
	name string, args *MetricArgs, opts ...pulumi.ResourceOption) (*Metric, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MetricsProviderId == nil {
		return nil, errors.New("invalid value for required argument 'MetricsProviderId'")
	}
	if args.PageId == nil {
		return nil, errors.New("invalid value for required argument 'PageId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Metric
	err := ctx.RegisterResource("statuspage:index/metric:Metric", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetric gets an existing Metric resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetric(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetricState, opts ...pulumi.ResourceOption) (*Metric, error) {
	var resource Metric
	err := ctx.ReadResource("statuspage:index/metric:Metric", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Metric resources.
type metricState struct {
	// How many decimal places to render on the graph
	DecimalPlaces *int `pulumi:"decimalPlaces"`
	// Should the metric be displayed
	Display *bool `pulumi:"display"`
	// The identifier used to look up the metric data from the provider
	MetricIdentifier *string `pulumi:"metricIdentifier"`
	// ID of the metric provider
	MetricsProviderId *string `pulumi:"metricsProviderId"`
	// Display name for the metric
	Name *string `pulumi:"name"`
	// The ID of the page this metric belongs to
	PageId *string `pulumi:"pageId"`
	// Suffix to describe the units on the graph
	Suffix *string `pulumi:"suffix"`
	// Tooltip for the metric
	TooltipDescription *string `pulumi:"tooltipDescription"`
	// The transform to apply to metric before pulling into Statuspage. One of: 'average', 'count', 'max', 'min', 'sum',
	// 'response_time' or 'uptime'
	Transform *string `pulumi:"transform"`
	// Should the values on the y axis be hidden on render
	YAxisHidden *bool `pulumi:"yAxisHidden"`
	// The upper bound of the y axis
	YAxisMax *float64 `pulumi:"yAxisMax"`
	// The lower bound of the y axis
	YAxisMin *float64 `pulumi:"yAxisMin"`
}

type MetricState struct {
	// How many decimal places to render on the graph
	DecimalPlaces pulumi.IntPtrInput
	// Should the metric be displayed
	Display pulumi.BoolPtrInput
	// The identifier used to look up the metric data from the provider
	MetricIdentifier pulumi.StringPtrInput
	// ID of the metric provider
	MetricsProviderId pulumi.StringPtrInput
	// Display name for the metric
	Name pulumi.StringPtrInput
	// The ID of the page this metric belongs to
	PageId pulumi.StringPtrInput
	// Suffix to describe the units on the graph
	Suffix pulumi.StringPtrInput
	// Tooltip for the metric
	TooltipDescription pulumi.StringPtrInput
	// The transform to apply to metric before pulling into Statuspage. One of: 'average', 'count', 'max', 'min', 'sum',
	// 'response_time' or 'uptime'
	Transform pulumi.StringPtrInput
	// Should the values on the y axis be hidden on render
	YAxisHidden pulumi.BoolPtrInput
	// The upper bound of the y axis
	YAxisMax pulumi.Float64PtrInput
	// The lower bound of the y axis
	YAxisMin pulumi.Float64PtrInput
}

func (MetricState) ElementType() reflect.Type {
	return reflect.TypeOf((*metricState)(nil)).Elem()
}

type metricArgs struct {
	// How many decimal places to render on the graph
	DecimalPlaces *int `pulumi:"decimalPlaces"`
	// Should the metric be displayed
	Display *bool `pulumi:"display"`
	// The identifier used to look up the metric data from the provider
	MetricIdentifier *string `pulumi:"metricIdentifier"`
	// ID of the metric provider
	MetricsProviderId string `pulumi:"metricsProviderId"`
	// Display name for the metric
	Name *string `pulumi:"name"`
	// The ID of the page this metric belongs to
	PageId string `pulumi:"pageId"`
	// Suffix to describe the units on the graph
	Suffix *string `pulumi:"suffix"`
	// Tooltip for the metric
	TooltipDescription *string `pulumi:"tooltipDescription"`
	// The transform to apply to metric before pulling into Statuspage. One of: 'average', 'count', 'max', 'min', 'sum',
	// 'response_time' or 'uptime'
	Transform *string `pulumi:"transform"`
	// Should the values on the y axis be hidden on render
	YAxisHidden *bool `pulumi:"yAxisHidden"`
	// The upper bound of the y axis
	YAxisMax *float64 `pulumi:"yAxisMax"`
	// The lower bound of the y axis
	YAxisMin *float64 `pulumi:"yAxisMin"`
}

// The set of arguments for constructing a Metric resource.
type MetricArgs struct {
	// How many decimal places to render on the graph
	DecimalPlaces pulumi.IntPtrInput
	// Should the metric be displayed
	Display pulumi.BoolPtrInput
	// The identifier used to look up the metric data from the provider
	MetricIdentifier pulumi.StringPtrInput
	// ID of the metric provider
	MetricsProviderId pulumi.StringInput
	// Display name for the metric
	Name pulumi.StringPtrInput
	// The ID of the page this metric belongs to
	PageId pulumi.StringInput
	// Suffix to describe the units on the graph
	Suffix pulumi.StringPtrInput
	// Tooltip for the metric
	TooltipDescription pulumi.StringPtrInput
	// The transform to apply to metric before pulling into Statuspage. One of: 'average', 'count', 'max', 'min', 'sum',
	// 'response_time' or 'uptime'
	Transform pulumi.StringPtrInput
	// Should the values on the y axis be hidden on render
	YAxisHidden pulumi.BoolPtrInput
	// The upper bound of the y axis
	YAxisMax pulumi.Float64PtrInput
	// The lower bound of the y axis
	YAxisMin pulumi.Float64PtrInput
}

func (MetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metricArgs)(nil)).Elem()
}

type MetricInput interface {
	pulumi.Input

	ToMetricOutput() MetricOutput
	ToMetricOutputWithContext(ctx context.Context) MetricOutput
}

func (*Metric) ElementType() reflect.Type {
	return reflect.TypeOf((**Metric)(nil)).Elem()
}

func (i *Metric) ToMetricOutput() MetricOutput {
	return i.ToMetricOutputWithContext(context.Background())
}

func (i *Metric) ToMetricOutputWithContext(ctx context.Context) MetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricOutput)
}

// MetricArrayInput is an input type that accepts MetricArray and MetricArrayOutput values.
// You can construct a concrete instance of `MetricArrayInput` via:
//
//	MetricArray{ MetricArgs{...} }
type MetricArrayInput interface {
	pulumi.Input

	ToMetricArrayOutput() MetricArrayOutput
	ToMetricArrayOutputWithContext(context.Context) MetricArrayOutput
}

type MetricArray []MetricInput

func (MetricArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Metric)(nil)).Elem()
}

func (i MetricArray) ToMetricArrayOutput() MetricArrayOutput {
	return i.ToMetricArrayOutputWithContext(context.Background())
}

func (i MetricArray) ToMetricArrayOutputWithContext(ctx context.Context) MetricArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricArrayOutput)
}

// MetricMapInput is an input type that accepts MetricMap and MetricMapOutput values.
// You can construct a concrete instance of `MetricMapInput` via:
//
//	MetricMap{ "key": MetricArgs{...} }
type MetricMapInput interface {
	pulumi.Input

	ToMetricMapOutput() MetricMapOutput
	ToMetricMapOutputWithContext(context.Context) MetricMapOutput
}

type MetricMap map[string]MetricInput

func (MetricMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Metric)(nil)).Elem()
}

func (i MetricMap) ToMetricMapOutput() MetricMapOutput {
	return i.ToMetricMapOutputWithContext(context.Background())
}

func (i MetricMap) ToMetricMapOutputWithContext(ctx context.Context) MetricMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricMapOutput)
}

type MetricOutput struct{ *pulumi.OutputState }

func (MetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Metric)(nil)).Elem()
}

func (o MetricOutput) ToMetricOutput() MetricOutput {
	return o
}

func (o MetricOutput) ToMetricOutputWithContext(ctx context.Context) MetricOutput {
	return o
}

// How many decimal places to render on the graph
func (o MetricOutput) DecimalPlaces() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Metric) pulumi.IntPtrOutput { return v.DecimalPlaces }).(pulumi.IntPtrOutput)
}

// Should the metric be displayed
func (o MetricOutput) Display() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Metric) pulumi.BoolPtrOutput { return v.Display }).(pulumi.BoolPtrOutput)
}

// The identifier used to look up the metric data from the provider
func (o MetricOutput) MetricIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Metric) pulumi.StringPtrOutput { return v.MetricIdentifier }).(pulumi.StringPtrOutput)
}

// ID of the metric provider
func (o MetricOutput) MetricsProviderId() pulumi.StringOutput {
	return o.ApplyT(func(v *Metric) pulumi.StringOutput { return v.MetricsProviderId }).(pulumi.StringOutput)
}

// Display name for the metric
func (o MetricOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Metric) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the page this metric belongs to
func (o MetricOutput) PageId() pulumi.StringOutput {
	return o.ApplyT(func(v *Metric) pulumi.StringOutput { return v.PageId }).(pulumi.StringOutput)
}

// Suffix to describe the units on the graph
func (o MetricOutput) Suffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Metric) pulumi.StringPtrOutput { return v.Suffix }).(pulumi.StringPtrOutput)
}

// Tooltip for the metric
func (o MetricOutput) TooltipDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Metric) pulumi.StringPtrOutput { return v.TooltipDescription }).(pulumi.StringPtrOutput)
}

// The transform to apply to metric before pulling into Statuspage. One of: 'average', 'count', 'max', 'min', 'sum',
// 'response_time' or 'uptime'
func (o MetricOutput) Transform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Metric) pulumi.StringPtrOutput { return v.Transform }).(pulumi.StringPtrOutput)
}

// Should the values on the y axis be hidden on render
func (o MetricOutput) YAxisHidden() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Metric) pulumi.BoolPtrOutput { return v.YAxisHidden }).(pulumi.BoolPtrOutput)
}

// The upper bound of the y axis
func (o MetricOutput) YAxisMax() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Metric) pulumi.Float64PtrOutput { return v.YAxisMax }).(pulumi.Float64PtrOutput)
}

// The lower bound of the y axis
func (o MetricOutput) YAxisMin() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Metric) pulumi.Float64PtrOutput { return v.YAxisMin }).(pulumi.Float64PtrOutput)
}

type MetricArrayOutput struct{ *pulumi.OutputState }

func (MetricArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Metric)(nil)).Elem()
}

func (o MetricArrayOutput) ToMetricArrayOutput() MetricArrayOutput {
	return o
}

func (o MetricArrayOutput) ToMetricArrayOutputWithContext(ctx context.Context) MetricArrayOutput {
	return o
}

func (o MetricArrayOutput) Index(i pulumi.IntInput) MetricOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Metric {
		return vs[0].([]*Metric)[vs[1].(int)]
	}).(MetricOutput)
}

type MetricMapOutput struct{ *pulumi.OutputState }

func (MetricMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Metric)(nil)).Elem()
}

func (o MetricMapOutput) ToMetricMapOutput() MetricMapOutput {
	return o
}

func (o MetricMapOutput) ToMetricMapOutputWithContext(ctx context.Context) MetricMapOutput {
	return o
}

func (o MetricMapOutput) MapIndex(k pulumi.StringInput) MetricOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Metric {
		return vs[0].(map[string]*Metric)[vs[1].(string)]
	}).(MetricOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MetricInput)(nil)).Elem(), &Metric{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricArrayInput)(nil)).Elem(), MetricArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricMapInput)(nil)).Elem(), MetricMap{})
	pulumi.RegisterOutputType(MetricOutput{})
	pulumi.RegisterOutputType(MetricArrayOutput{})
	pulumi.RegisterOutputType(MetricMapOutput{})
}
