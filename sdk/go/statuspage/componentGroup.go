// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package statuspage

import (
	"context"
	"reflect"

	"errors"
	"github.com/mortaelth/pulumi-statuspage-provider/sdk/go/statuspage/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/mortaelth/pulumi-statuspage-provider/sdk/go/statuspage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := statuspage.NewComponentGroup(ctx, "myGroup", &statuspage.ComponentGroupArgs{
//				Components: pulumi.StringArray{
//					statuspage_component.My_component.Id,
//				},
//				Description: pulumi.String("Created by terraform"),
//				PageId:      pulumi.String("pageid"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// `statuspage_component_group` can be imported using the ID of the component group, e.g.
//
// ```sh
//
//	$ pulumi import statuspage:index/componentGroup:ComponentGroup my_group my-page-id/my-component-group-id
//
// ```
type ComponentGroup struct {
	pulumi.CustomResourceState

	// List of component IDs
	Components pulumi.StringArrayOutput `pulumi:"components"`
	// description of the component group
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// name of the component group
	Name pulumi.StringOutput `pulumi:"name"`
	// the id of the page this component belongs to
	PageId pulumi.StringOutput `pulumi:"pageId"`
}

// NewComponentGroup registers a new resource with the given unique name, arguments, and options.
func NewComponentGroup(ctx *pulumi.Context,
	name string, args *ComponentGroupArgs, opts ...pulumi.ResourceOption) (*ComponentGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Components == nil {
		return nil, errors.New("invalid value for required argument 'Components'")
	}
	if args.PageId == nil {
		return nil, errors.New("invalid value for required argument 'PageId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ComponentGroup
	err := ctx.RegisterResource("statuspage:index/componentGroup:ComponentGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComponentGroup gets an existing ComponentGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComponentGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComponentGroupState, opts ...pulumi.ResourceOption) (*ComponentGroup, error) {
	var resource ComponentGroup
	err := ctx.ReadResource("statuspage:index/componentGroup:ComponentGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComponentGroup resources.
type componentGroupState struct {
	// List of component IDs
	Components []string `pulumi:"components"`
	// description of the component group
	Description *string `pulumi:"description"`
	// name of the component group
	Name *string `pulumi:"name"`
	// the id of the page this component belongs to
	PageId *string `pulumi:"pageId"`
}

type ComponentGroupState struct {
	// List of component IDs
	Components pulumi.StringArrayInput
	// description of the component group
	Description pulumi.StringPtrInput
	// name of the component group
	Name pulumi.StringPtrInput
	// the id of the page this component belongs to
	PageId pulumi.StringPtrInput
}

func (ComponentGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*componentGroupState)(nil)).Elem()
}

type componentGroupArgs struct {
	// List of component IDs
	Components []string `pulumi:"components"`
	// description of the component group
	Description *string `pulumi:"description"`
	// name of the component group
	Name *string `pulumi:"name"`
	// the id of the page this component belongs to
	PageId string `pulumi:"pageId"`
}

// The set of arguments for constructing a ComponentGroup resource.
type ComponentGroupArgs struct {
	// List of component IDs
	Components pulumi.StringArrayInput
	// description of the component group
	Description pulumi.StringPtrInput
	// name of the component group
	Name pulumi.StringPtrInput
	// the id of the page this component belongs to
	PageId pulumi.StringInput
}

func (ComponentGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*componentGroupArgs)(nil)).Elem()
}

type ComponentGroupInput interface {
	pulumi.Input

	ToComponentGroupOutput() ComponentGroupOutput
	ToComponentGroupOutputWithContext(ctx context.Context) ComponentGroupOutput
}

func (*ComponentGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentGroup)(nil)).Elem()
}

func (i *ComponentGroup) ToComponentGroupOutput() ComponentGroupOutput {
	return i.ToComponentGroupOutputWithContext(context.Background())
}

func (i *ComponentGroup) ToComponentGroupOutputWithContext(ctx context.Context) ComponentGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentGroupOutput)
}

// ComponentGroupArrayInput is an input type that accepts ComponentGroupArray and ComponentGroupArrayOutput values.
// You can construct a concrete instance of `ComponentGroupArrayInput` via:
//
//	ComponentGroupArray{ ComponentGroupArgs{...} }
type ComponentGroupArrayInput interface {
	pulumi.Input

	ToComponentGroupArrayOutput() ComponentGroupArrayOutput
	ToComponentGroupArrayOutputWithContext(context.Context) ComponentGroupArrayOutput
}

type ComponentGroupArray []ComponentGroupInput

func (ComponentGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ComponentGroup)(nil)).Elem()
}

func (i ComponentGroupArray) ToComponentGroupArrayOutput() ComponentGroupArrayOutput {
	return i.ToComponentGroupArrayOutputWithContext(context.Background())
}

func (i ComponentGroupArray) ToComponentGroupArrayOutputWithContext(ctx context.Context) ComponentGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentGroupArrayOutput)
}

// ComponentGroupMapInput is an input type that accepts ComponentGroupMap and ComponentGroupMapOutput values.
// You can construct a concrete instance of `ComponentGroupMapInput` via:
//
//	ComponentGroupMap{ "key": ComponentGroupArgs{...} }
type ComponentGroupMapInput interface {
	pulumi.Input

	ToComponentGroupMapOutput() ComponentGroupMapOutput
	ToComponentGroupMapOutputWithContext(context.Context) ComponentGroupMapOutput
}

type ComponentGroupMap map[string]ComponentGroupInput

func (ComponentGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ComponentGroup)(nil)).Elem()
}

func (i ComponentGroupMap) ToComponentGroupMapOutput() ComponentGroupMapOutput {
	return i.ToComponentGroupMapOutputWithContext(context.Background())
}

func (i ComponentGroupMap) ToComponentGroupMapOutputWithContext(ctx context.Context) ComponentGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentGroupMapOutput)
}

type ComponentGroupOutput struct{ *pulumi.OutputState }

func (ComponentGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentGroup)(nil)).Elem()
}

func (o ComponentGroupOutput) ToComponentGroupOutput() ComponentGroupOutput {
	return o
}

func (o ComponentGroupOutput) ToComponentGroupOutputWithContext(ctx context.Context) ComponentGroupOutput {
	return o
}

// List of component IDs
func (o ComponentGroupOutput) Components() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ComponentGroup) pulumi.StringArrayOutput { return v.Components }).(pulumi.StringArrayOutput)
}

// description of the component group
func (o ComponentGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComponentGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// name of the component group
func (o ComponentGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ComponentGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// the id of the page this component belongs to
func (o ComponentGroupOutput) PageId() pulumi.StringOutput {
	return o.ApplyT(func(v *ComponentGroup) pulumi.StringOutput { return v.PageId }).(pulumi.StringOutput)
}

type ComponentGroupArrayOutput struct{ *pulumi.OutputState }

func (ComponentGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ComponentGroup)(nil)).Elem()
}

func (o ComponentGroupArrayOutput) ToComponentGroupArrayOutput() ComponentGroupArrayOutput {
	return o
}

func (o ComponentGroupArrayOutput) ToComponentGroupArrayOutputWithContext(ctx context.Context) ComponentGroupArrayOutput {
	return o
}

func (o ComponentGroupArrayOutput) Index(i pulumi.IntInput) ComponentGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ComponentGroup {
		return vs[0].([]*ComponentGroup)[vs[1].(int)]
	}).(ComponentGroupOutput)
}

type ComponentGroupMapOutput struct{ *pulumi.OutputState }

func (ComponentGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ComponentGroup)(nil)).Elem()
}

func (o ComponentGroupMapOutput) ToComponentGroupMapOutput() ComponentGroupMapOutput {
	return o
}

func (o ComponentGroupMapOutput) ToComponentGroupMapOutputWithContext(ctx context.Context) ComponentGroupMapOutput {
	return o
}

func (o ComponentGroupMapOutput) MapIndex(k pulumi.StringInput) ComponentGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ComponentGroup {
		return vs[0].(map[string]*ComponentGroup)[vs[1].(string)]
	}).(ComponentGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentGroupInput)(nil)).Elem(), &ComponentGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentGroupArrayInput)(nil)).Elem(), ComponentGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentGroupMapInput)(nil)).Elem(), ComponentGroupMap{})
	pulumi.RegisterOutputType(ComponentGroupOutput{})
	pulumi.RegisterOutputType(ComponentGroupArrayOutput{})
	pulumi.RegisterOutputType(ComponentGroupMapOutput{})
}
