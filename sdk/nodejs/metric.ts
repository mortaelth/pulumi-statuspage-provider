// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Metric extends pulumi.CustomResource {
    /**
     * Get an existing Metric resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MetricState, opts?: pulumi.CustomResourceOptions): Metric {
        return new Metric(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'statuspage:index/metric:Metric';

    /**
     * Returns true if the given object is an instance of Metric.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Metric {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Metric.__pulumiType;
    }

    /**
     * How many decimal places to render on the graph
     */
    public readonly decimalPlaces!: pulumi.Output<number | undefined>;
    /**
     * Should the metric be displayed
     */
    public readonly display!: pulumi.Output<boolean | undefined>;
    /**
     * The identifier used to look up the metric data from the provider
     */
    public readonly metricIdentifier!: pulumi.Output<string | undefined>;
    /**
     * ID of the metric provider
     */
    public readonly metricsProviderId!: pulumi.Output<string>;
    /**
     * Display name for the metric
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the page this metric belongs to
     */
    public readonly pageId!: pulumi.Output<string>;
    /**
     * Suffix to describe the units on the graph
     */
    public readonly suffix!: pulumi.Output<string | undefined>;
    /**
     * Tooltip for the metric
     */
    public readonly tooltipDescription!: pulumi.Output<string | undefined>;
    /**
     * The transform to apply to metric before pulling into Statuspage. One of: 'average', 'count', 'max', 'min', 'sum',
     * 'response_time' or 'uptime'
     */
    public readonly transform!: pulumi.Output<string | undefined>;
    /**
     * Should the values on the y axis be hidden on render
     */
    public readonly yAxisHidden!: pulumi.Output<boolean | undefined>;
    /**
     * The upper bound of the y axis
     */
    public readonly yAxisMax!: pulumi.Output<number | undefined>;
    /**
     * The lower bound of the y axis
     */
    public readonly yAxisMin!: pulumi.Output<number | undefined>;

    /**
     * Create a Metric resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MetricArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MetricArgs | MetricState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MetricState | undefined;
            resourceInputs["decimalPlaces"] = state ? state.decimalPlaces : undefined;
            resourceInputs["display"] = state ? state.display : undefined;
            resourceInputs["metricIdentifier"] = state ? state.metricIdentifier : undefined;
            resourceInputs["metricsProviderId"] = state ? state.metricsProviderId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pageId"] = state ? state.pageId : undefined;
            resourceInputs["suffix"] = state ? state.suffix : undefined;
            resourceInputs["tooltipDescription"] = state ? state.tooltipDescription : undefined;
            resourceInputs["transform"] = state ? state.transform : undefined;
            resourceInputs["yAxisHidden"] = state ? state.yAxisHidden : undefined;
            resourceInputs["yAxisMax"] = state ? state.yAxisMax : undefined;
            resourceInputs["yAxisMin"] = state ? state.yAxisMin : undefined;
        } else {
            const args = argsOrState as MetricArgs | undefined;
            if ((!args || args.metricsProviderId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metricsProviderId'");
            }
            if ((!args || args.pageId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pageId'");
            }
            resourceInputs["decimalPlaces"] = args ? args.decimalPlaces : undefined;
            resourceInputs["display"] = args ? args.display : undefined;
            resourceInputs["metricIdentifier"] = args ? args.metricIdentifier : undefined;
            resourceInputs["metricsProviderId"] = args ? args.metricsProviderId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pageId"] = args ? args.pageId : undefined;
            resourceInputs["suffix"] = args ? args.suffix : undefined;
            resourceInputs["tooltipDescription"] = args ? args.tooltipDescription : undefined;
            resourceInputs["transform"] = args ? args.transform : undefined;
            resourceInputs["yAxisHidden"] = args ? args.yAxisHidden : undefined;
            resourceInputs["yAxisMax"] = args ? args.yAxisMax : undefined;
            resourceInputs["yAxisMin"] = args ? args.yAxisMin : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Metric.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Metric resources.
 */
export interface MetricState {
    /**
     * How many decimal places to render on the graph
     */
    decimalPlaces?: pulumi.Input<number>;
    /**
     * Should the metric be displayed
     */
    display?: pulumi.Input<boolean>;
    /**
     * The identifier used to look up the metric data from the provider
     */
    metricIdentifier?: pulumi.Input<string>;
    /**
     * ID of the metric provider
     */
    metricsProviderId?: pulumi.Input<string>;
    /**
     * Display name for the metric
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the page this metric belongs to
     */
    pageId?: pulumi.Input<string>;
    /**
     * Suffix to describe the units on the graph
     */
    suffix?: pulumi.Input<string>;
    /**
     * Tooltip for the metric
     */
    tooltipDescription?: pulumi.Input<string>;
    /**
     * The transform to apply to metric before pulling into Statuspage. One of: 'average', 'count', 'max', 'min', 'sum',
     * 'response_time' or 'uptime'
     */
    transform?: pulumi.Input<string>;
    /**
     * Should the values on the y axis be hidden on render
     */
    yAxisHidden?: pulumi.Input<boolean>;
    /**
     * The upper bound of the y axis
     */
    yAxisMax?: pulumi.Input<number>;
    /**
     * The lower bound of the y axis
     */
    yAxisMin?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Metric resource.
 */
export interface MetricArgs {
    /**
     * How many decimal places to render on the graph
     */
    decimalPlaces?: pulumi.Input<number>;
    /**
     * Should the metric be displayed
     */
    display?: pulumi.Input<boolean>;
    /**
     * The identifier used to look up the metric data from the provider
     */
    metricIdentifier?: pulumi.Input<string>;
    /**
     * ID of the metric provider
     */
    metricsProviderId: pulumi.Input<string>;
    /**
     * Display name for the metric
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the page this metric belongs to
     */
    pageId: pulumi.Input<string>;
    /**
     * Suffix to describe the units on the graph
     */
    suffix?: pulumi.Input<string>;
    /**
     * Tooltip for the metric
     */
    tooltipDescription?: pulumi.Input<string>;
    /**
     * The transform to apply to metric before pulling into Statuspage. One of: 'average', 'count', 'max', 'min', 'sum',
     * 'response_time' or 'uptime'
     */
    transform?: pulumi.Input<string>;
    /**
     * Should the values on the y axis be hidden on render
     */
    yAxisHidden?: pulumi.Input<boolean>;
    /**
     * The upper bound of the y axis
     */
    yAxisMax?: pulumi.Input<number>;
    /**
     * The lower bound of the y axis
     */
    yAxisMin?: pulumi.Input<number>;
}
