// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Statuspage
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Statuspage = Pulumi.Statuspage;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var statuspagePingdom = new Statuspage.MetricsProvider("statuspagePingdom", new()
    ///     {
    ///         ApiToken = "a-pingdom-api-token",
    ///         PageId = "pageid",
    ///         Type = "Pingdom",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// `statuspage_metrics_provider` can be imported using the ID of the metrics provider, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import statuspage:index/metricsProvider:MetricsProvider statuspage_pingdom my-page-id/my-metrics-provider-id
    /// ```
    /// </summary>
    [StatuspageResourceType("statuspage:index/metricsProvider:MetricsProvider")]
    public partial class MetricsProvider : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Required by the Datadog and NewRelic type metrics providers.
        /// </summary>
        [Output("apiKey")]
        public Output<string?> ApiKey { get; private set; } = null!;

        /// <summary>
        /// Required by the Librato and Pingdom-type metrics provider.
        /// </summary>
        [Output("apiToken")]
        public Output<string?> ApiToken { get; private set; } = null!;

        /// <summary>
        /// Required by the Pingdom and Datadog type metrics providers.
        /// </summary>
        [Output("applicationKey")]
        public Output<string?> ApplicationKey { get; private set; } = null!;

        /// <summary>
        /// Required by the Librato and Pingdom type metrics providers.
        /// </summary>
        [Output("email")]
        public Output<string?> Email { get; private set; } = null!;

        /// <summary>
        /// Required by the NewRelic-type metrics provider
        /// </summary>
        [Output("metricBaseUri")]
        public Output<string?> MetricBaseUri { get; private set; } = null!;

        /// <summary>
        /// the id of the page this component belongs to
        /// </summary>
        [Output("pageId")]
        public Output<string> PageId { get; private set; } = null!;

        /// <summary>
        /// Required by the Pingdom-type metrics provider.
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// One of `Pingdom`, `NewRelic`, `Librato`, `Datadog`, or `Self`
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a MetricsProvider resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MetricsProvider(string name, MetricsProviderArgs args, CustomResourceOptions? options = null)
            : base("statuspage:index/metricsProvider:MetricsProvider", name, args ?? new MetricsProviderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MetricsProvider(string name, Input<string> id, MetricsProviderState? state = null, CustomResourceOptions? options = null)
            : base("statuspage:index/metricsProvider:MetricsProvider", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "apiKey",
                    "apiToken",
                    "applicationKey",
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MetricsProvider resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MetricsProvider Get(string name, Input<string> id, MetricsProviderState? state = null, CustomResourceOptions? options = null)
        {
            return new MetricsProvider(name, id, state, options);
        }
    }

    public sealed class MetricsProviderArgs : global::Pulumi.ResourceArgs
    {
        [Input("apiKey")]
        private Input<string>? _apiKey;

        /// <summary>
        /// Required by the Datadog and NewRelic type metrics providers.
        /// </summary>
        public Input<string>? ApiKey
        {
            get => _apiKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _apiKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("apiToken")]
        private Input<string>? _apiToken;

        /// <summary>
        /// Required by the Librato and Pingdom-type metrics provider.
        /// </summary>
        public Input<string>? ApiToken
        {
            get => _apiToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _apiToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("applicationKey")]
        private Input<string>? _applicationKey;

        /// <summary>
        /// Required by the Pingdom and Datadog type metrics providers.
        /// </summary>
        public Input<string>? ApplicationKey
        {
            get => _applicationKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _applicationKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Required by the Librato and Pingdom type metrics providers.
        /// </summary>
        [Input("email")]
        public Input<string>? Email { get; set; }

        /// <summary>
        /// Required by the NewRelic-type metrics provider
        /// </summary>
        [Input("metricBaseUri")]
        public Input<string>? MetricBaseUri { get; set; }

        /// <summary>
        /// the id of the page this component belongs to
        /// </summary>
        [Input("pageId", required: true)]
        public Input<string> PageId { get; set; } = null!;

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// Required by the Pingdom-type metrics provider.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// One of `Pingdom`, `NewRelic`, `Librato`, `Datadog`, or `Self`
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public MetricsProviderArgs()
        {
        }
        public static new MetricsProviderArgs Empty => new MetricsProviderArgs();
    }

    public sealed class MetricsProviderState : global::Pulumi.ResourceArgs
    {
        [Input("apiKey")]
        private Input<string>? _apiKey;

        /// <summary>
        /// Required by the Datadog and NewRelic type metrics providers.
        /// </summary>
        public Input<string>? ApiKey
        {
            get => _apiKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _apiKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("apiToken")]
        private Input<string>? _apiToken;

        /// <summary>
        /// Required by the Librato and Pingdom-type metrics provider.
        /// </summary>
        public Input<string>? ApiToken
        {
            get => _apiToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _apiToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("applicationKey")]
        private Input<string>? _applicationKey;

        /// <summary>
        /// Required by the Pingdom and Datadog type metrics providers.
        /// </summary>
        public Input<string>? ApplicationKey
        {
            get => _applicationKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _applicationKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Required by the Librato and Pingdom type metrics providers.
        /// </summary>
        [Input("email")]
        public Input<string>? Email { get; set; }

        /// <summary>
        /// Required by the NewRelic-type metrics provider
        /// </summary>
        [Input("metricBaseUri")]
        public Input<string>? MetricBaseUri { get; set; }

        /// <summary>
        /// the id of the page this component belongs to
        /// </summary>
        [Input("pageId")]
        public Input<string>? PageId { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// Required by the Pingdom-type metrics provider.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// One of `Pingdom`, `NewRelic`, `Librato`, `Datadog`, or `Self`
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public MetricsProviderState()
        {
        }
        public static new MetricsProviderState Empty => new MetricsProviderState();
    }
}
